BALBARINO, VIC MARIE L. MEng 124 AdMath Coding Exercise 02 CODES
----------------------------------------------------------------


*************Front End Code**************

#WebAppForMC.py

import streamlit as st
import numpy as np
import AddMatrix as am
import MultiplyMatrix as mm
import TransposeMatrix as tm
import InverseMatrix as im
import DetMatrix as dm

st.set_page_config(
    page_title="MATRIX CALCULATOR",
    page_icon=":calculator",
    layout="wide")
st.markdown("""
        <h1 style="font-size: 90px; font-family: 'Bebas Neue'; text-align: center; color: white">
        MATRIX CALCULATOR
        </h1>
    """, unsafe_allow_html=True)
st.subheader('Hi, Welcome! What do you want to do today?', divider='rainbow')

option = st.selectbox("Select an option:",("Add Matrices", "Multiply Matrices", "Transpose Matrices", "Inverse of Matrices", "Determinant of Matrices"), index = None)
print(st.session_state)
col1, col2, col3 = st.columns(3)
with col1:
    st.markdown("""
       <h1 style="font-size: 20px; font-family: 'Tahoma'; text-align: center">
       Enter the size of Matrix A:
       </h1>
   """, unsafe_allow_html=True)
with col2:
    row_a = st.number_input("ROW:", min_value=1, max_value=5, key='row_a')
with col3:
    column_a = st.number_input("COLUMN:", min_value=1, max_value=5, key='column_a')

col4, col5, col6 = st.columns(3)
with col4:
    st.markdown("""
       <h1 style="font-size: 20px; font-family: 'Tahoma'; text-align: center">
       Enter the size of Matrix B:
       </h1>
   """, unsafe_allow_html=True)
with col5:
    row_b = st.number_input("", min_value=1, max_value=5, key='row_b')
with col6:
    column_b = st.number_input("", min_value=1, max_value=5, key='column_b')


col7, col8= st.columns(2)
with col7:
    st.markdown("""
           <h1 style="font-size: 24px; font-family: 'Bebas Neue';">
           Matrix A
           </h1>
       """, unsafe_allow_html=True)
    matA = []
    for row_index in range(row_a):
        columns = st.columns(column_a)
        row_values = []
        for col_index, col in enumerate(columns):
            with col:
               value = st.text_input("", key=f'Arow{row_index + 1}Acol{col_index + 1}')
               row_values.append(value.strip() if value else '0')
        matA.append(row_values)

with col8:
    st.markdown("""
               <h1 style="font-size: 24px; font-family: 'Bebas Neue';">
               Matrix B
               </h1>
           """, unsafe_allow_html=True)
    matB = []
    for row_index in range(row_b):
        columns = st.columns(column_b)
        row_values = []
        for col_index, col in enumerate(columns):
            with col:
               value = st.text_input("", key=f'Brow{row_index + 1}Bcol{col_index + 1}')
               row_values.append(value.strip() if value else '0')
        matB.append(row_values)

    if all(value.isdigit() for row in matA + matB for value in row):
        matA = [[int(value) for value in row] for row in matA]
        matB = [[int(value) for value in row] for row in matB]

calculate = st.button("Calculate", key='add_button')

if option == "Add Matrices":
    st.markdown(
        """
        <style>
        .stApp{
            background-color : #17202A ;

        }
        </style>
        """,
        unsafe_allow_html=True)
    st.subheader("Addition of Matrices", divider="blue")
    if len(matA[0]) != len(matB):
        st.error("Size of Matrix A and B should be equal.")
    else:
        if calculate:
            try:
                st.caption("Here is the sum of your matrices.")
                matrix_result = am.addmatrix(matA, matB)
                col6, col7, col8 = st.columns(3)
                with col7:
                    for row_index in range(len(matrix_result)):
                        columns = st.columns(len(matrix_result[0]))
                        for col_index, col in enumerate(columns):
                            with col:
                                st.text_input("", value=matrix_result[row_index][col_index], key=f'Rrow{row_index + 1}Rcol{col_index + 1}')
            except IndexError:
                st.error("Size of Matrix A and B should be equal.")

elif option == "Multiply Matrices":
    st.markdown(
        """
        <style>
        .stApp{
            background-color : #17202A ;

        }
        </style>
        """,
        unsafe_allow_html=True)
    st.subheader("Multiplication of Matrices", divider="blue")

    if len(matA) != len(matB):
        st.error("Number of Columns in Matrix A and Rows in Matrix B should be equal.")
    else:
        if calculate:
            try:
                st.caption("Here is the product of your matrices.")
                matrix_result = mm.multiplymatrix(matA,matB)
                col6, col7, col8 = st.columns(3)
                with col7:
                    for row_index in range(len(matrix_result)):
                        columns = st.columns(len(matrix_result[0]))
                        for col_index, col in enumerate(columns):
                            with col:
                                st.text_input("", value=matrix_result[row_index][col_index],
                                          key=f'Rrow{row_index + 1}Rcol{col_index + 1}')
            except ValueError as e:
                st.error(str(e))

elif option == "Transpose Matrices":
    st.markdown(
        """
        <style>
        .stApp{
            background-color : #17202A ;

        }
        </style>
        """,
        unsafe_allow_html=True)
    st.subheader("Transpose of Matrices", divider="blue")
    if calculate:
        try:
            st.caption("Here is the transpose of your matrices.")
            matrix_result = tm.transposematrix(matA, matB)
            col1, col2, col3 = st.columns(3)
            with col2:
                for row_index in range(len(matrix_result)):
                    columns = st.columns(len(matrix_result[0]))
                    for col_index, col in enumerate(columns):
                        with col:
                            st.text_input("", value=matrix_result[row_index][col_index],
                                          key=f'Rrow{row_index + 1}Rcol{col_index + 1}')
        except TypeError as e:
            st.error(str(e))
elif option == "Inverse of Matrices":
    st.markdown(
        """
        <style>
        .stApp{
            background-color : #17202A ;

        }
        </style>
        """,
        unsafe_allow_html=True)
    st.subheader("Inverse of Matrices", divider="blue")
    if calculate:
            st.caption("Here is the inverse of your matrices.")
            inverse_matA, inverse_matB = im.inversematrix(matA,matB)
            if inverse_matA is not None and inverse_matB is not None:
                col6, col7 = st.columns(2)
                with col6:
                    st.caption("For Matrix A:")
                    for row_index in range(len(inverse_matA)):
                        for col_index in range(len(inverse_matA[row_index])):
                            st.text_input("", value=str(inverse_matA[row_index][col_index]), key=f'A_{row_index + 1}Acol{col_index + 1}')
                with col7:
                    st.caption("For Matrix B:")
                    for row_index in range(len(inverse_matB)):
                        for col_index in range(len(inverse_matB[row_index])):
                            st.text_input("", value=str(inverse_matB[row_index][col_index]), key=f'B_{row_index + 1}Bcol{col_index + 1}')
            else:
                st.error("Error: Noninvertible matrices.")
elif option == "Determinant of Matrices":
    st.markdown(
        """
        <style>
        .stApp{
            background-color : #17202A ;

        }
        </style>
        """,
        unsafe_allow_html=True)
    st.subheader("Determinant of Matrices", divider="blue")
    if len(matA[0]) != len(matB):
        st.error("Size of Matrix A and B should be equal.")
    else:
        if calculate:
            st.caption("Here is the determinant of your matrices.")
            try:
                det_matA, det_matB = dm.detmatrix(matA,matB)
                col4, col5 = st.columns (2)
                with col4:
                    st.caption("For Matrix A:")
                    st.text_input("", value=str(det_matA))
                with col5:
                    st.caption("For Matrix B:")
                    st.text_input("", value=str(det_matB))
            except ValueError as e:
                st.error(str(e))




*************Back End Code**************

#AddMatrix.py

def addmatrix(matA, matB):
    matSum = []
    for i in range(len(matA)):
        rowSum = []
        for j in range(len(matA[0])):
            val = int(matA[i][j]) + int(matB[i][j])
            rowSum.append(val)
        matSum.append(rowSum)
    return matSum

#MultiplyMatrix.py

def multiplymatrix (matA, matB):

    if len(matA[0]) != len(matB):
        raise ValueError("Matrices Incompatible. The number of columns in Matrix A must be equal to the number of Rows in Matrix B.")
    result = [[0 for _ in range(len(matA[0]))] for _ in range(len(matA))]

    for i in range(len(matA)):
        for j in range(len(matB[0])):
            for k in range(len(matA[0])):
                result [i][j] += int(matA[i][k]) * int(matB[k][j])
    return result

#TransposeMatrix.py

import streamlit as st
def transposematrix(matA, matB):
    try:
        trans_A = [[0 for _ in range(len(matA))] for _ in range(len(matA[0]))]
        for i in range(len(matA)):
            for j in range(len(matA[0])):
                trans_A[j][i] = matA[i][j]

        trans_B  = [[0 for _ in range(len(matB))] for _ in range(len(matB[0]))]
        for i in range(len(matB)):
            for j in range(len(matB[0])):
                trans_B[j][i] = matB[i][j]

        return trans_A, trans_B
    except Exception as e:
        st.error(f"An error occured: {e}")
        return None, None

#InverseMatrix.py

import numpy as np
import streamlit as st
def inversematrix(matA, matB):
    try:
        np_matA = np.array(matA, dtype=float)
        np_matB = np.array(matB, dtype=float)

        inverse_matA = np.linalg.inv(np_matA)
        inverse_matB = np.linalg.inv(np_matB)

        return inverse_matA, inverse_matB
    except np.linalg.LinAlgError as e:
        st.error("Error: Noninvertible matrices.")
        return None, None

#DetMatrix.py

import numpy as np

def detmatrix(matA,matB):
    np_matA = np.array(matA, dtype=float)
    np_matB = np.array(matB, dtype=float)

    det_matA = np.linalg.det(np_matA)
    det_matB = np.linalg.det(np_matB)
    return det_matA, det_matB

